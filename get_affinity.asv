function im = get_affinity(coords)

    coords = coords - 18;
    coords(:,1) = coords(:,1)+18;
        
    C = lash_constants;

    cube_size = 128 * ones(1,3);
    
    
    
    chunks_to_get = [floor(coords(1,:)./cube_size); ...
        floor(coords(2,:)./cube_size)];
    
    im = zeros((chunks_to_get(2,:) - chunks_to_get(1,:) + 1).*cube_size, 'uint32');
    
    for x = chunks_to_get(1,1):chunks_to_get(2,1)
        for y = chunks_to_get(1,2):chunks_to_get(2,2)
            for z = chunks_to_get(1,3):chunks_to_get(2,3)
                s = ([x y z] - chunks_to_get(1,:)) .* cube_size;                                
                im(s(1) + (1:cube_size(1)), s(2) + (1:cube_size(2)), s(3) + (1:cube_size(3))) = ...
                    get_aff_cube([x y z]);
            end
        end
    end
                
    imr = coords - ones(2,1)*(chunks_to_get(1,:).*max_chunk_size);
    im = im(imr(1,1):imr(2,1), imr(1,2):imr(2,2), imr(1,3):imr(2,3));
    
    im = upsample_im_mode(im, [2 2 2]);
    
    
    
end



function aff = get_aff_cube(cube_num);
    C = lash_constants;
    
    xstr = format_num(cube_num(1), 3);
    ystr = format_num(cube_num(2), 3);
    zstr = format_num(cube_num(3), 3);
    
    fn = [C.affinity_dir  '/' 
        
    bytes_per_cube = prod(chunk_size);    
    bytes_per_col = bytes_per_cube * vol_size(1)/chunk_size(1);
    bytes_per_plane = bytes_per_col * vol_size(2)/chunk_size(2);
    
    
    %am I in a squished cube-zone?
    if chunk_num(1)+1 > floor(vol_size(1)/chunk_size(1))
        chunk_size(1) = mod(vol_size(1), chunk_size(1));
    end
    if chunk_num(2)+1 > floor(vol_size(2)/chunk_size(2))
        bytes_per_cube = bytes_per_cube / chunk_size(2) * mod(vol_size(2), chunk_size(2));
        chunk_size(2) = mod(vol_size(2), chunk_size(2));
    end
    if chunk_num(3)+1 > floor(vol_size(3)/chunk_size(3))
        bytes_per_col = bytes_per_col / chunk_size(3) * mod(vol_size(3), chunk_size(3));
        bytes_per_cube = bytes_per_cube / chunk_size(3) * mod(vol_size(3), chunk_size(3));
        chunk_size(3) = mod(vol_size(3), chunk_size(3));
    end
    

    byte_pos = 4*(bytes_per_plane*(chunk_num(3)) + ...
        bytes_per_col * (chunk_num(2)) + ...
        bytes_per_cube * (chunk_num(1)));
    
    fseek(fid, byte_pos, 'bof');
    chunk_im = fread(fid, prod(chunk_size), 'uint32');
    chunk_im = reshape(chunk_im, chunk_size);
    
end
    
    
function new_im = upsample_im_mode(im, upsampling)
    new_im = zeros([size(im) upsampling], 'uint32');
    for k = 1:prod(upsampling);
        new_im(:,:,:,k) = im;
    end
    
    new_im = permute(new_im, [4 1 5 2 6 3]);
    new_im = reshape(new_im, size(im).*upsampling);
end
    